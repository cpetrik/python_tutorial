TERMINAL
===================================================================== 
The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
(base) OM610-petrik:~ cpetrik$ cd Dropbox/Princeton/NCAR/Python_tutorials/
(base) OM610-petrik:Python_tutorials cpetrik$ conda activate python_tutorial1
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ cp windchillcomp.py heatindexcomp.py
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ ls
NCAR Python Tutorial.pdf	NCAR_python_tutorial4.txt
NCAR_python_tutorial1.txt	data
NCAR_python_tutorial2.txt	heatindexcomp.py
NCAR_python_tutorial3.txt	windchillcomp.py
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ git add heatindexcomp.py 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ git commit -m "Copying wind script to start heat script"
[master ec94f8b] Copying wind script to start heat script
 1 file changed, 57 insertions(+)
 create mode 100644 heatindexcomp.py
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ nano heatindexcomp.py 


heatindexcomp.py 1  =====================================================================  
# Create a column dictionary (names and indices to read)
columns = {'date':0, 'time':1, 'tempout':2, 'humout':5, 'heatindex':13}

# Data types for each colun (only if not string)
types = {'tempout':float, 'humout':float, 'heatindex':float}

# Initialize data variable
data = {}
for column in columns:
    data[column] = []

# Read the data file
filename = "data/wxobs20170821.txt"

with open(filename,'r') as datafile:
    # Read first 3 lines (header)
    for _ in range(3):
        datafile.readline()

    # Read and parse the rest of the file
    for line in datafile:
# Read the data file
filename = "data/wxobs20170821.txt"

with open(filename,'r') as datafile:
    # Read first 3 lines (header)
    for _ in range(3):
        datafile.readline()

    # Read and parse the rest of the file
    for line in datafile:
        split_line = line.split()
        for column in columns:
            i = columns[column]
            t = types.get(column,str)
            value = t(split_line[i])
            data[column].append(value)

# Compute heat index
def compute_heatindex(t,hum):
    a = -42.379
    b = 2.04901523
    c = 10.14333127
    d = 0.22475541
    e = 0.00683783
    f = 0.05481717
    g = 0.00122874
    h = 0.00085282
    i = 0.00000199

    # relative humidity from percent to decimal

    # relative humidity from percent to decimal
    rh = hum / 100

    hi = (a + (b * t) + (c * rh) + (d * t * rh) +
        (e * t**2) + (f * rh**2) + (g * t**2 * rh)+
        (h * t * rh**2) + (i * t**2 * rh**2))

    return hi

# Running the function to compute wci
heatindex = []
for temp, humout in zip(data['tempout'],data['humout']):
    heatindex.append(compute_heatindex(temp,humout))

# Output comparison of data
print('                ORIGINAL  COMPUTED')
print(' DATE    TIME  HEAT INDEX HEAT INDX DIFF')
print('------- ------ ---------- --------- ----')
zip_data = zip(data['date'], data['time'], data['heatindex'], heatindex)
for date, time, hi_orig, hi_comp in zip_data:
    hi_diff = hi_orig - hi_comp
    print(f'{date} {time:>6} {hi_orig:9.6f} {hi_comp:9.6f} {hi_diff:10.6f}')


TERMINAL
===================================================================== 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ nano heatindexcomp.py 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ git add heatindexcomp.py 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ git commit -m "Updated heat index script"
[master cf5482f] Updated heat index script
 1 file changed, 29 insertions(+), 20 deletions(-)
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ nano windchillcomp.py 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ touch readdata.py


readdata.py 1  =====================================================================  
#Doc section
    """
    Reads data from CU Boulder Weather Station data file
    Parameters:
        columns: dictionary of column names mapped to column indices
        types: dictionary of column names mapped to the types to which to 
               convert each column of data
        filename: string path pointing to the CU Boulder Weather Station file
    """ 
# columns always has to be first
def read_data(columns, types={}, filename="data/wxobs20170821.txt"):
    # Initialize data variable
    data = {}
    for column in columns:
        data[column] = []

    # Read the data file
    with open(filename,'r') as datafile:

        # Read first 3 lines (header)
        for _ in range(3):
            datafile.readline()

        # Read and parse the rest of the file
        for line in datafile:
            split_line = line.split()
            for column in columns:
                i = columns[column]
                t = types.get(column,str)
                value = t(split_line[i])
                data[column].append(value)

    return data


TERMINAL
===================================================================== 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ nano readdata.py 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ git add readdata.py 
(python_tutorial1) OM610-petrik:Python_tutorials cpetrik$ git commit -m "Wrote new readdata module"
[master 36defa6] Wrote new readdata module
 1 file changed, 32 insertions(+)
 create mode 100644 readdata.py


windchill.py
===================================================================== 
from readdata import read_data

# Create a column dictionary (names and indices to read)
columns = {'date':0, 'time':1, 'tempout':2, 'windspeed':7, 'windchill':12}

# Data types for each colun (only if not string)
types = {'tempout':float, 'windspeed':float, 'windchill':float}

# Initialize data variable
data = {}
for column in columns:
    data[column] = []

# Read the data file
data = read_data(columns, types)



printing.py
=====================================================================
 def print_comparison(name, dates, times, orig_data, comp_data):
    """
    Print a comparison of two time series (original and computed)
    Parameters:
        name: string name for the data being compared (limited to 9 char)
        dates: list of strings representing dates for each data
        orig_data: list of original data (floats)
        comp_data: list of computed data (floats)
    """

    # Output comparison of data
    print('                ORIGINAL  COMPUTED')
    print(f' DATE    TIME {name.upper():>9} {name.upper():>9} DIFFERENCE')
    print('------- ------ --------- --------- ----------')
    zip_data = zip(dates, times, orig_data, comp_data)
    for date, time, orig, comp in zip_data:
        diff = orig - comp
        print(f'{date} {time:>6} {orig:9.6f} {comp:9.6f} {diff:10.6f}')



computing.py
=====================================================================
def compute_windchill(t,v):
    """
    Compute the wind chill factor given temp and windspeed
    NOTE: valid only for temps between -45F and +45F and windspeeds between
          3 and 60 mph
    Parameters:
        t: temperature in F units (float)
        v: wind speed in mph units (float)
    """

    a = 35.74
    b = 0.6215
    c = 35.75
    d = 0.4275

    v16 = v ** 0.16

    wci = a + (b*t) - (c*v16) + (d*t*v16)

    return wci


def compute_heatindex(t,hum):
    """
    Compute the heat index from temp and humidity
    Parameters:
        t: temperature in F units (float)
        hum: percent humidity (float)
    """

    a = -42.379
    b = 2.04901523
    c = 10.14333127
    d = 0.22475541
    e = 0.00683783
    f = 0.05481717
    g = 0.00122874
    h = 0.00085282
    i = 0.00000199

    # relative humidity from percent to decimal
    rh = hum / 100

    hi = (a + (b * t) + (c * rh) + (d * t * rh) +
        (e * t**2) + (f * rh**2) + (g * t**2 * rh)+
        (h * t * rh**2) + (i * t**2 * rh**2))

    return hi


windchill.py
=====================================================================
from readdata import read_data
from printing import print_comparison
from computation import compute_windchill

# Create a column dictionary (names and indices to read)
columns = {'date':0, 'time':1, 'tempout':2, 'windspeed':7, 'windchill':12}

# Data types for each colun (only if not string)
types = {'tempout':float, 'windspeed':float, 'windchill':float}

# Read the data file
data = read_data(columns, types)

# Compute windchill index
# Running the function to compute wci
windchill = []
for temp, windspeed in zip(data['tempout'],data['windspeed']):
    windchill.append(compute_windchill(temp,windspeed))

# Output comparison of data
print_comparison('WINDCHILL', data['date'], data['time'], data['windchill'],
    windchill)


windchill.py
=====================================================================
from mysci.readdata import read_data
from mysci.printing import print_comparison
from mysci.computation import compute_windchill

# Create a column dictionary (names and indices to read)
columns = {'date':0, 'time':1, 'tempout':2, 'windspeed':7, 'windchill':12}

# Data types for each colun (only if not string)
types = {'tempout':float, 'windspeed':float, 'windchill':float}

# Read the data file
data = read_data(columns, types)

# Compute windchill index
# Running the function to compute wci
windchill = []
for temp, windspeed in zip(data['tempout'],data['windspeed']):
    windchill.append(compute_windchill(temp,windspeed))

# Output comparison of data
print_comparison('WINDCHILL', data['date'], data['time'], data['windchill'],
    windchill)



heatindex.py
=====================================================================

from readdata import read_data
from printing import print_comparison
from computation import compute_heatindex

# Create a column dictionary (names and indices to read)
columns = {'date':0, 'time':1, 'tempout':2, 'humout':5, 'heatindex':13}

# Data types for each colun (only if not string)
types = {'tempout':float, 'humout':float, 'heatindex':float}

# Read the data file
data = read_data(columns, types)

# Running the function to compute wci
heatindex = []
for temp, humout in zip(data['tempout'],data['humout']):
    heatindex.append(compute_heatindex(temp,humout))

# Output comparison of data
print_comparison('HEAT INDX', data['date'], data['time'], data['heatindex'],
    heatindex)


heatindex.py
===================================================================== 
from mysci.readdata import read_data
from mysci.printing import print_comparison
from mysci.computation import compute_heatindex

# Create a column dictionary (names and indices to read)
columns = {'date':0, 'time':1, 'tempout':2, 'humout':5, 'heatindex':13}

# Data types for each colun (only if not string)
types = {'tempout':float, 'humout':float, 'heatindex':float}

# Read the data file
data = read_data(columns, types)

# Running the function to compute wci
heatindex = []
for temp, humout in zip(data['tempout'],data['humout']):
    heatindex.append(compute_heatindex(temp,humout))

# Output comparison of data
print_comparison('HEAT INDX', data['date'], data['time'], data['heatindex'],
    heatindex)








